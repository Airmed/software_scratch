# main.bgs - main script file for HTTP server example

# Constants
const HANDLE_WIFI = 0                              # A handle indicating Wi-Fi interface
export const TIMER_RECONNECTION = 0                # A handle used for reconnection timer
const TIMER_STATUS_PIN = 1                         # A handle used for controlling status notification pin
const MODE_STA = 1                                 # STA mode value
const MODE_AP = 2                                  # AP mode value

# Constants for GPIO configuration
const GPIO_PORTA = 0
const GPIO_PORTB = 1
const GPIO_PORTC = 2
const GPIO_PORTD = 3
const GPIO_PORTE = 4
const GPIO_PORTF = 5

const GPIO_MODE_DISABLED = 0
const GPIO_MODE_INPUT = 1
const GPIO_MODE_INPUT_PULL = 2
const GPIO_MODE_INPUT_PULL_FILTER = 3
const GPIO_MODE_OUTPUT = 4

const GPIO_FILTER_OFF = 0
const GPIO_FILTER_ON = 1
const GPIO_OUTPUT_LOW = 0
const GPIO_OUTPUT_HIGH = 1

const GPIO_TRIGGER_DISABLED = 0
const GPIO_TRIGGER_RISING = 1
const GPIO_TRIGGER_FALLING = 2
const GPIO_TRIGGER_BOTH = 3

export const STATUS_INTERVAL_CONNECTING = 1000     # The interval in milliseconds for connecting state
export const STATUS_INTERVAL_CONNECTED = 0         # The interval in milliseconds for connected state
export const STATUS_INTERVAL_ERROR = 200           # The interval in milliseconds for error state
export const STATUS_PIN_STA = $0002                # Pin used for STA status notifications (PC1)
export const STATUS_PIN_AP = $0001                 # Pin used for AP status notifications (PC0)
export const STATUS_PIN_INDEX = 2                  # Port index for PIN_STA and PIN_AP (Port C)
export const FLASH_PS_KEY_STA_DHCP_ENABLED = $8000 # PS label for STA DHCP enabled
export const FLASH_PS_KEY_STA_IPV4_ADDR = $8001    # PS label for STA IP address
export const FLASH_PS_KEY_STA_IPV4_NETMASK = $8002 # PS label for STA netmask
export const FLASH_PS_KEY_STA_IPV4_GW = $8003      # PS label for STA gateway
export const FLASH_PS_KEY_STA_IPV4_DNS1 = $8004    # PS label for DNS #1
export const FLASH_PS_KEY_STA_IPV4_DNS2 = $8005    # PS label for DNS #2
export const FLASH_PS_KEY_AP_IPV4_ADDR = $8006     # PS label for AP IP address
export const FLASH_PS_KEY_AP_IPV4_NETMASK = $8007  # PS label for AP netmask
export const PATH_DEVICE_FLASH = 0                 # Path device for internal flash
export const PATH_DEVICE_API = 1                   # Path device for BGAPI
export const PATH_DEVICE_SDCARD = 2                # Path device for SD card

# Variables
export dim operating_mode       # Current Wi-Fi operating mode
export dim ssid(32)             # AP/STA SSID
export dim ssid_len             # AP/STA SSID length
export dim passphrase(63)       # AP/STA passphrase
export dim passphrase_len       # AP/STA passphrase length
export dim bssid(6)             # AP/STA BSSID
export dim cmd_result           # PS load command result code
export dim cmd_value_len        # PS load command value length
export dim cmd_value(64)        # PS load command value data
dim status_pin_index            # Port index of status notification pin
dim status_pin                  # Status notification pin
dim status_pin_state            # Status notification pin state
dim status_pin_interval         # Status notification pin interval

# Internal procedure called by status notification service. Switches between
# pin states and reschedules the interrupt service.
procedure status_notification_next()
  # Set pin output.
  status_pin_state = status_pin_state ^ 1
  if status_pin_state = 0
    call hardware_write_gpio(status_pin_index, status_pin, status_pin)
  else
    call hardware_write_gpio(status_pin_index, status_pin, $0000)
  end if

  # Reschedule the interrupt service if an interval has been set.
  if status_pin_interval > 0
    call hardware_set_soft_timer(status_pin_interval, TIMER_STATUS_PIN, 1)
  end if
end

# Procedure for starting status notification service.
export procedure start_status_notification(index, pin, interval)
  # Store initial values
  status_pin_index = index
  status_pin = pin
  status_pin_state = 0
  status_pin_interval = interval

  # Start the interrupt service.
  call status_notification_next()
end

# Import station functionality
import "sta.bgs"
# Import access point functionality
import "ap.bgs"
# Import API functionality
import "api.bgs"

# Procedure for falling back to AP mode. This will reset the operating
# mode setting in PS.
procedure reset_operating_mode()
  call flash_ps_save(FLASH_PS_KEY_MODULE_SERVICE, 4, MODE_AP)
end

# Event received when the system has been successfully started up.
event system_boot(hw, bootloader_version, major, minor, build, revision_len, revision_data)
  # Config IO port direction - Set port C pin 0 as output (LED)
  call hardware_configure_gpio(GPIO_PORTC, 0, GPIO_MODE_OUTPUT, GPIO_OUTPUT_LOW)
  # Config IO port direction - Set port C pin 1 as output (LED)
  call hardware_configure_gpio(GPIO_PORTC, 1, GPIO_MODE_OUTPUT, GPIO_OUTPUT_LOW)
  
  # Configure GPIO for interrupt
  # Config IO port direction - Set port A pin 2 as input
  call hardware_configure_gpio(GPIO_PORTA, 2, GPIO_MODE_INPUT, GPIO_FILTER_ON)
  # Enable interrupt on pin PA2 (Push Button 0)
  call hardware_configure_gpio_interrupt(GPIO_PORTA, 2, GPIO_TRIGGER_FALLING)
  
  # Initialise variables
  call sta_init_mode()
  call ap_init_mode()
  call api_init()
  operating_mode = MODE_AP

  # Read the current operating mode from PS.
  call flash_ps_load(FLASH_PS_KEY_MODULE_SERVICE)(cmd_result, cmd_value_len, cmd_value(0:cmd_value_len))
  if cmd_result = 0
    operating_mode = cmd_value(0:cmd_value_len)
  end if

  # Set the correct operating mode.
  call sme_set_operating_mode(operating_mode)

  # Read the MAC address, this call will trigger config_mac_address.
  call config_get_mac(0)(cmd_result, cmd_value_len)
  if cmd_result != 0
    # No MAC address was found. This happens after flashing with PICKit. Proceed with startup,
    # a default MAC address will be used.

    # Enable Wi-Fi, this call will trigger sme_wifi_is_on() event.
    call sme_wifi_on()
  end if
end

# Event received when a MAC address has been received.
event config_mac_address(hw_interface, mac)
  # Add the MAC address to the default SSID.
  call ap_add_mac_to_default_ssid(6,mac(0:6))

  # Store the MAC address. This will be overwritten in STA mode.
  memcpy(bssid(0), mac(0), 6)

  # Enable Wi-Fi, this call will trigger sme_wifi_is_on() event.
  call sme_wifi_on()
end

# Event received after Wi-Fi has been switched on.
event sme_wifi_is_on(state)
  if operating_mode = MODE_STA then
    # Indicate connecting state via the status notification service.
    call start_status_notification(STATUS_PIN_INDEX, STATUS_PIN_STA, STATUS_INTERVAL_CONNECTING)

    # Start station mode.
    call sta_start_mode()
  else
    # Indicate connecting state via the status notification service.
    call start_status_notification(STATUS_PIN_INDEX, STATUS_PIN_AP, STATUS_INTERVAL_CONNECTING)

    # Initiate a scan. This needs to be done before starting AP mode.
    # This call will trigger sme_scanned() event once done.
    call sme_start_scan(HANDLE_WIFI, 0, 0)
  end if
end

# Event received when Wi-Fi has been switched off or there has been
# a catastrophic failure somewhere. For now assume this means
# we are switching between modes and turn Wi-Fi on.
event sme_wifi_is_off(state)
  # Enable Wi-Fi, this call will trigger sme_wifi_is_on() event.
  call sme_wifi_on()
end

# Event received when a scan has been completed.
event sme_scanned(status)
  if operating_mode = MODE_AP
    # Scanning has been completed, start AP mode.
    call ap_start_mode()
  end if
end

# Event received when a timer is triggered.
event hardware_soft_timer(handle)
  if handle = TIMER_RECONNECTION
    # Try reconnecting to the network.
    call sme_connect_ssid(ssid_len, ssid(0:ssid_len))
  end if
  if handle = TIMER_STATUS_PIN
    # Handle status notification.
    call status_notification_next()
  end if
end

# In case of button connected to PD4 is pressed, set default settings and reset module
event hardware_interrupt(interrupts, timestamp)
  if (interrupts & 4)
    call sta_reset_mode()
    call ap_reset_mode()
    call reset_operating_mode()
    call system_reset(0)
  end if
end 
